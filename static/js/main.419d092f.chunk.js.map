{"version":3,"sources":["components/UserList.js","components/Title.js","components/Search.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["UserList","props","className","name","src","picture","city","state","email","Title","Search","onSubmit","e","preventDefault","htmlFor","onChange","handleInputChange","value","search","type","placeholder","id","axios","get","App","result","event","target","setState","newResult","filter","employee","first","toLowerCase","indexOf","last","length","API","then","res","data","results","catch","err","console","log","this","map","element","index","key","medium","location","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sWAmBeA,MAff,SAAkBC,GACd,OACI,wBAAIC,UAAU,cAEV,wBAAIA,UAAU,mBACV,4BAAKD,EAAME,MACX,yBAAKC,IAAKH,EAAMI,UAChB,qCAAWJ,EAAMK,MACjB,sCAAYL,EAAMM,OAClB,sCAAYN,EAAMO,U,MCFnBC,MARf,WACI,OACI,4BAAQP,UAAU,SACd,oD,MCgBGQ,MAnBf,SAAgBT,GACZ,OACI,0BAAMU,SAAU,SAACC,GAAD,OAAKA,EAAEC,mBACnB,yBAAKX,UAAU,cACX,2BAAOY,QAAQ,UAAf,WACA,2BACEC,SAAUd,EAAMe,kBAChBC,MAAOhB,EAAMiB,OACbf,KAAK,SACLgB,KAAK,OACLjB,UAAU,eACVkB,YAAY,yBACZC,GAAG,c,iBCZN,EACC,WACR,OAAOC,IAAMC,IAJL,kDCsEDC,G,kNA7DbjB,MAAQ,CACNkB,OAAQ,GACRP,OAAQ,I,EASVF,kBAAoB,SAAAU,GAClB,IAAMT,EAAQS,EAAMC,OAAOV,MACrBd,EAAOuB,EAAMC,OAAOxB,KAC1B,EAAKyB,SAAL,eACGzB,EAAOc,IAGV,IAAIY,EAAY,EAAKtB,MAAMkB,OAAOK,QAAO,SAAAC,GACvC,OAAOA,EAAS5B,KAAK6B,MAAMC,cAAcC,QAAQjB,IAAQ,GAAKc,EAAS5B,KAAKgC,KAAKF,cAAcC,QAAQjB,IAAQ,KAEjH,EAAKW,SAAS,CACZH,OAAQI,IAES,IAAfZ,EAAMmB,QACRC,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKX,SAAS,CAAEH,OAAQc,EAAIC,KAAKC,aAC7CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,kEAtBX,IAAD,OAClBN,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKX,SAAS,CAAEH,OAAQc,EAAIC,KAAKC,aAC7CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAyB5B,OACE,yBAAKzC,UAAU,aACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,WACf,kBAAC,EAAD,CACCe,MAAO6B,KAAKvC,MAAMW,OAClBF,kBAAmB8B,KAAK9B,qBAGzB,yBAAKd,UAAU,WACZ4C,KAAKvC,MAAMkB,OAAOsB,KAAI,SAACC,EAASC,GAAV,OACrB,kBAAC,EAAD,CACEC,IAAKD,EACL9C,KAAM6C,EAAQ7C,KAAK6B,MAAQ,IAAMgB,EAAQ7C,KAAKgC,KAC9C9B,QAAS2C,EAAQ3C,QAAQ8C,OACzB7C,KAAM0C,EAAQI,SAAS9C,KACvBE,MAAOwC,EAAQxC,MACfD,MAAOyC,EAAQI,SAAS7C,kB,GArDtB8C,cCIEC,QACW,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.419d092f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/UserList.css\"\n\n\nfunction UserList(props) {\n    return (\n        <ul className=\"list-group\">\n\n            <li className=\"list-group-item\">\n                <h3>{props.name}</h3>\n                <img src={props.picture}/>\n                <h3>City: {props.city}</h3>\n                <h3>State: {props.state}</h3>\n                <h3>Email: {props.email}</h3>\n            </li>\n        </ul>\n    );\n}\n\nexport default UserList;","import React from \"react\";\nimport \"../styles/Title.css\"\n\nfunction Title() {\n    return (\n        <header className=\"title\">\n            <h1>Employee Directory</h1>\n        </header>\n    );\n}\n\nexport default Title;","import React from \"react\";\nimport \"../styles/Search.css\"\n\nfunction Search(props){\n    return(\n        <form onSubmit={(e)=>e.preventDefault()}>\n            <div className=\"form-group\">\n                <label htmlFor=\"search\">Search:</label>\n                <input\n                  onChange={props.handleInputChange}\n                  value={props.search}\n                  name=\"search\"\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Search for an employee\"\n                  id=\"search\"\n                />\n            </div>\n        </form>\n    )\n}\n\nexport default Search;","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n\nexport default {\n    randomuser: function() {\n        return axios.get(BASEURL);\n    }\n};","import React, { Component } from \"react\";\n//import logo from './logo.svg';\nimport UserList from \"./components/UserList\";\nimport Title from \"./components/Title\";\nimport Search from \"./components/Search\";\nimport API from \"./utils/API\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    result: [],\n    search: \"\"\n  };\n\n  componentDidMount() {\n    API.randomuser()\n      .then(res => this.setState({ result: res.data.results }))\n      .catch(err => console.log(err));\n  }\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value\n    });\n\n    let newResult = this.state.result.filter(employee =>{\n      return employee.name.first.toLowerCase().indexOf(value)>-1 || employee.name.last.toLowerCase().indexOf(value)>-1\n    })\n    this.setState({\n      result: newResult\n    })\n    if (value.length===0){\n      API.randomuser()\n        .then(res => this.setState({ result: res.data.results }))\n        .catch(err => console.log(err));\n    }\n  };\n\n  render() {\n\n    return (\n      <div className=\"container\">\n        <Title />\n        <div className=\"flex\">\n          <div className=\"formbox\">\n          <Search\n           value={this.state.search}\n           handleInputChange={this.handleInputChange}\n           />\n          </div>\n          <div className=\"listbox\">\n            {this.state.result.map((element, index) => (\n              <UserList\n                key={index}\n                name={element.name.first + \" \" + element.name.last}\n                picture={element.picture.medium}\n                city={element.location.city}\n                email={element.email}\n                state={element.location.state}\n                />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}